// Code generated for package charts by go-bindata DO NOT EDIT. (@generated)
// sources:
// charts/core-workshop-infra/Chart.yaml
// charts/core-workshop-infra/templates/code-server.yaml
// charts/core-workshop-infra/templates/external-dns.yaml
// charts/core-workshop-infra/templates/traefik-2.yaml
// charts/podinfo/external-chart
// charts/podinfo/values-override.yaml
package charts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _coreWorkshopInfraChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe2\xca\x4b\xcc\x4d\xb5\x52\x48\xce\x2f\x4a\xd5\x2d\xcf\x2f\xca\x2e\xce\xc8\x2f\xd0\xcd\xcc\x4b\x2b\x4a\xe4\x2a\x83\xa9\x32\xd0\x33\xd4\x33\xe0\x02\x04\x00\x00\xff\xff\x70\x15\x52\x44\x38\x00\x00\x00")

func coreWorkshopInfraChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraChartYaml,
		"core-workshop-infra/Chart.yaml",
	)
}

func coreWorkshopInfraChartYaml() (*asset, error) {
	bytes, err := coreWorkshopInfraChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/Chart.yaml", size: 56, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coreWorkshopInfraTemplatesCodeServerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x73\xdb\x36\x10\xbd\xf3\x57\xec\x58\x67\x52\x76\x7a\xf1\xf0\xe6\x5a\x49\xc7\x53\xc7\xd2\x48\x4a\x7a\xcc\xac\xc0\x95\x88\x0a\x04\x38\xc0\x52\xb1\x9a\xe6\xbf\x77\xc0\x2f\x81\xa2\xd4\x4c\x7c\x08\x4f\x24\x80\xdd\xf7\xf0\xf0\x76\xc1\x09\x96\xf2\x33\x59\x27\x8d\x4e\xe1\x70\x17\x4d\xf6\x52\x67\x29\xbc\x60\x41\xae\x44\x41\xd1\xa4\x20\xc6\x0c\x19\xd3\x68\x02\xa0\xb1\xa0\x14\xbe\x1a\xbb\x77\xb9\x29\x05\xab\x6e\xb0\x5e\x7c\x36\x13\xc7\x71\x14\xa6\xb7\x1b\x14\x09\x56\x9c\x1b\x2b\xff\x41\x96\x46\x27\xfb\x7b\x97\x48\x33\x3d\xdc\x45\x0d\xee\xa3\xaa\x1c\x93\x5d\x1a\x45\xbf\x4b\x9d\x49\xbd\x8b\x4e\xf8\x1d\xbc\x30\x19\xc5\x8e\xec\x81\x6c\x74\x15\xdd\x1a\x45\x4b\xda\xfa\x28\x2c\xe5\x1f\xd6\x54\xe5\xff\x30\x88\x00\x46\x04\x4e\x78\xcd\x58\x8c\x59\x21\x75\xe4\xaa\xcd\xdf\x24\xd8\xa5\x51\xdc\xc6\xac\xc8\x1e\xa4\xa0\x07\x21\x4c\xa5\xf9\xe7\x68\x9e\x6b\xd4\x2b\x71\x96\xf4\x8d\x2a\x5c\x4d\xff\x68\xf4\x56\xee\x3e\x62\xf9\xd6\xcc\x00\x0a\x37\xa4\x9c\x0f\xf3\x12\x97\xc3\xb8\x2e\xa3\xa8\x71\x52\xf8\x37\x6e\xd7\x0d\xb8\xf8\xa1\x90\x4f\x3d\xd0\xca\xdd\x66\x8e\xbb\xef\xe6\xb3\x5e\x40\x96\xe5\x56\x0a\x64\x8a\xdb\xc3\xe4\x63\x0a\xd3\x03\xda\xa9\xad\xf4\xd4\x91\xb0\xc4\x6e\xba\xaf\x36\x64\x35\x31\xd5\x1e\x73\x8d\xa0\xd8\x08\x3a\x15\x98\x08\xcb\x7d\xce\x86\x76\x0a\x39\x73\xe9\xd2\x69\x18\x9b\xd1\x16\x2b\xd5\x2d\x6d\x24\x0a\xc7\x84\xd1\x4c\xaf\x7c\xe2\xdb\x7c\x07\x7c\xdb\x0d\xc0\x30\xd3\x40\xda\xf3\xa9\xca\x8d\x03\x2e\x40\x57\xd6\x92\xe6\xb8\x83\x1c\x4c\xfa\x14\x3d\xa9\x71\x6c\x8b\xd1\x23\xb2\xd9\x93\xfe\x20\x15\xfd\xac\x92\x75\xe0\xc8\x69\x58\x96\xee\x54\xd7\x33\x2a\x95\x39\x16\xf4\x76\x27\xff\xc0\x6f\xae\x24\xe1\xa7\x1c\x29\x12\x6c\xda\x7d\x15\xc8\x22\x7f\x0e\xe2\x2e\x44\x02\x30\x15\xa5\x42\xa6\x36\x26\xe0\xe7\x1f\x35\x08\xbf\x98\x00\xa0\x83\xef\xac\x74\xaa\xdc\x97\x0b\x5b\xec\x5c\x83\x52\xf7\x47\xe4\x0f\x49\x16\xb8\xa3\x14\x54\xf5\x8a\x6e\xba\xbf\x77\xf1\x57\xda\xc4\x32\xa3\xf4\xf0\x2e\xb9\x4b\xee\x7a\x0a\x13\x58\xcf\x67\xf3\x14\x9e\x34\x70\x4e\xb0\xad\xb8\xb2\x94\xc2\x2e\x17\xd6\x9f\x8f\x50\xa6\xca\x62\x8d\x2c\x0f\x14\x6b\x63\x33\x29\xce\xd2\xdd\x26\xef\x92\xdb\x3e\x5d\x0d\xbb\xa8\x94\x5a\x18\x25\xc5\x31\x85\x07\xf5\x15\x8f\x6e\x60\xd3\x4b\x5b\x00\x28\x8d\xe5\x40\x9a\xce\x66\xbe\x88\xfa\xc1\x60\xab\x0b\x63\x39\x85\xfb\xdb\xfb\x13\x36\xe9\xc3\x38\x7e\xfd\x69\x3d\x5f\x3e\x3d\x3c\xaf\xbe\x2c\xdf\x2f\xe6\x41\xa6\x03\xaa\x8a\x3e\x58\x53\xa4\xc1\xa0\x57\xdc\xdb\xf4\x4f\x3a\xb6\x0d\x3f\x7c\xc6\x37\xd6\x70\x7e\x4f\xc7\xab\x80\x63\x3e\xb3\xa7\xe5\x2f\xa5\x13\xe2\x75\x6c\x16\x0f\xab\xd5\x5f\xf3\xe5\xec\x17\x10\x79\x7c\xfe\xb4\x5a\xbf\x5f\x7e\x19\x41\x1e\x8c\xaa\x0a\xfa\xe8\x0d\x7e\xe1\xfc\x7d\xbb\x10\xa7\x86\xde\x3c\x85\x5f\xbc\x40\xce\x53\x98\xe6\xa6\xa0\xa9\x37\x94\x9d\x26\x7e\xf1\x28\x43\x66\xc4\x3e\xf0\xd9\x30\xba\xeb\x4e\xcd\xa2\xc4\x19\xb1\x8f\x42\x5a\x41\x45\x5d\xe5\x23\xba\xfb\x2f\xd4\xe5\x9a\xd1\xaf\xb0\xca\x8d\x6b\x28\x05\x29\xca\xeb\x14\x7f\x74\xd5\xbf\xb5\x33\x5e\x6e\x7d\x17\xda\x54\x5f\xad\x71\xfd\xea\x2b\xb1\x5e\xca\x68\x77\xc4\x67\xc5\x19\x54\xf2\x39\x71\x4d\xec\xf1\xa5\xde\x8d\xfe\xdf\x9e\xf4\xce\x92\x73\x6f\x6f\xf2\xa8\xb5\xe1\xfa\xcf\xac\x3d\xc5\x09\x7c\x30\x56\x10\x20\xb8\xdc\x58\x86\xf5\xfa\x19\x9c\x01\xce\x91\x61\xf6\xb2\x02\x4b\xc2\xd8\x0c\x44\x8e\x7a\x47\x0e\x04\x6a\x28\xad\x29\x71\x87\x4c\xb0\x45\x7f\xf1\xd6\x79\xe8\x95\xc9\x6a\x54\x71\xa6\x5d\x82\xaa\xcc\x31\x19\xde\x6a\xcc\x2a\x85\x9b\xdf\x6e\xdd\x4d\xaf\xa8\x6c\x76\xf3\xa8\xd0\xb9\xa6\x8f\xb3\x45\xda\x4a\x6f\x37\x5b\x29\x6a\xc5\xf4\x3e\x48\xe1\xe6\xdb\x37\x48\x3e\xfb\x42\x74\x49\xb0\xa7\xa4\xab\xa1\xd9\xfc\xe3\xc3\xd3\x0b\x7c\xff\x7e\x53\xf3\xf1\xca\x76\xc6\xf1\xa6\x09\x4c\xdb\x7a\x28\x0a\x3d\xb5\x3e\x96\xbe\xf4\x2d\x6d\xe5\x6b\x3f\xb1\x41\xb1\x27\x9d\x85\xfe\x6b\x2f\x9f\x61\xb5\x5f\x6f\xe0\xd0\x36\xf1\x51\x77\xa8\x8a\x8d\xff\x01\xb9\xbf\x8d\xfe\x0b\x00\x00\xff\xff\xb3\x85\xd9\x3f\x22\x0c\x00\x00")

func coreWorkshopInfraTemplatesCodeServerYamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraTemplatesCodeServerYaml,
		"core-workshop-infra/templates/code-server.yaml",
	)
}

func coreWorkshopInfraTemplatesCodeServerYaml() (*asset, error) {
	bytes, err := coreWorkshopInfraTemplatesCodeServerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/templates/code-server.yaml", size: 3106, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coreWorkshopInfraTemplatesExternalDnsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xdf\x6f\xe3\xb6\x0f\x7f\xcf\x5f\x41\xe4\x5e\xeb\x7c\x5b\x7c\x5f\x06\x03\x79\xe8\x2e\xc1\x50\xe0\x9a\x1c\xd2\x5e\x37\x6c\x28\x0a\x45\x62\x6c\xad\xb2\x24\x90\xb4\x5b\xdf\xa1\xff\xfb\x20\xdb\x6d\xed\x6b\x6e\x87\xa1\x7a\x72\x44\x91\xfc\xfc\x20\xa3\xa2\xbd\x41\x62\x1b\x7c\x0e\xcd\xd9\xec\xde\x7a\x93\xc3\x15\x52\x63\x35\x9e\x6b\x1d\x6a\x2f\xb3\x0a\x45\x19\x25\x2a\x9f\x01\x78\x55\x61\x0e\xf8\x28\x48\x5e\xb9\xcc\x78\x1e\x2e\x39\x2a\x8d\x39\x3c\x04\xba\xe7\x32\x44\x2d\x6e\x96\x65\xd9\x6c\x5c\x9f\xf6\x4a\x2f\x54\x2d\x65\x20\xfb\x55\x89\x0d\x7e\x71\xff\x0b\x2f\x6c\xf8\xdf\x4b\xe7\x8f\xae\x66\x41\xda\x05\x87\x3f\x6b\x4b\xb5\x43\xce\x67\x19\xa8\x68\x7f\xa3\x50\x47\xce\xe1\xaf\xf9\xfc\x76\x06\x40\xc8\xa1\x26\x8d\xdd\x0d\xf7\x64\x78\x7e\x32\x47\x6f\x62\xb0\x5e\xd2\x77\x0c\x86\xbb\xc7\x0d\xd2\xbe\x7b\x58\xa0\xcc\x4f\xe6\x0f\x4a\x74\x39\x3f\x99\x3b\xcb\x32\xbf\xfd\xbe\x7c\x42\xe0\x13\x9b\x54\xc2\xa3\x24\xba\xd6\x17\x03\x8f\xb7\xcd\xad\x2f\x08\x99\x91\xe7\xb7\xf0\x5f\x7b\xbd\xad\xe6\x83\xc1\xef\x40\x3f\xa7\xbe\x4b\xea\x5f\xad\x37\xd6\x17\x3f\x51\x3c\x6b\x2c\x3e\x20\xfd\xd8\x6f\x0a\x0e\x77\x78\x48\xd9\xcf\x44\xfe\x05\xc9\x0c\xe0\xad\xe7\x47\x9d\xe6\x7a\xff\x37\x6a\xe9\xcc\x3e\x3a\xa0\xef\x1b\x4b\x15\x23\xbf\xca\xb2\xc2\xe8\x42\x5b\xe1\x3b\xe6\x9e\x23\xea\xbc\xf3\x2e\x3a\xab\x15\xe7\x70\x36\x03\x60\x21\x25\x58\xb4\x29\x02\x20\x6d\xc4\x1c\x76\xa8\x09\x95\x24\xde\x8c\x0e\xb5\x04\xea\xc3\x55\x9a\x8c\x4f\x6a\x8f\x8e\xfb\x8b\x24\x69\x7c\x03\x40\xb0\x8a\x4e\x09\x0e\x49\x23\xbc\xe9\xb8\x49\xfe\xf1\x0a\x00\xcf\x68\xbb\xef\x89\xae\x9b\x63\x9c\xd3\xd1\xc1\x8b\xb2\x1e\xe9\xa5\x78\x76\x5c\xa0\xfe\xd8\x4a\x15\x98\x43\xb2\xbd\xd0\x94\x86\x70\xfc\x6c\xf2\x23\x6f\x4e\x17\x67\x67\x8b\x53\xf8\x00\xd7\xdb\xd5\x36\x87\x2f\xb1\x20\x65\x10\x24\x40\x17\x7a\x25\x43\xc5\x88\xda\x07\xf8\x3d\x29\x06\x17\xfd\xbe\x81\xf2\xe6\x79\x48\x20\xf4\xd3\xd3\xdd\xf5\x72\xc3\x6a\x73\x05\x84\x3a\x90\x61\xd0\x81\x08\x39\x86\x6e\x05\x5c\x0b\x2f\x35\x33\xc8\xb2\x7e\xf9\x96\xc3\x1a\x1f\x0b\x0d\x92\x8d\x90\x5c\xaa\x7b\x64\x58\x0f\xac\x52\x2b\x46\x84\xe0\x5d\x0b\x52\x22\x94\x81\x05\x0d\x7c\x0d\x1e\xb9\xf7\xd9\xfa\x02\x22\x85\xc6\x1a\x34\x60\x42\xa5\xac\x3f\x81\x50\x59\x49\xac\x23\x05\xdd\x31\x72\x0e\x54\xa3\xac\x53\x7b\x37\x2d\x32\x41\xd5\xa7\x67\x07\xeb\x04\x69\xf9\xed\x1b\x2c\x6e\x94\xab\x91\x17\xa3\x01\x5d\xec\xb6\xdb\xeb\xbb\xd5\xf6\xf2\xfc\x62\x03\x4f\x4f\x8b\x49\x81\x01\xc8\x0f\x73\xd7\x7f\x5c\xaf\x77\x9b\xf3\x4f\x77\xab\xcd\xd5\xdd\xe7\xdd\xf6\xe6\x62\xb5\xde\xc1\xd3\xd3\x48\x80\xcf\x84\x0d\x7a\x99\x6a\x70\xa0\x50\x81\x41\x87\x92\xe8\x2a\xdf\x3e\x1b\xf0\x4a\x15\x7d\xc7\xed\x50\x3b\x07\xdc\x7a\x5d\x52\xf0\xc3\x7f\xc6\x14\x62\x70\x56\xb7\xcb\x3a\x32\x92\x64\x49\xd8\x49\x98\xb0\xb0\x2c\xd4\x2e\xe5\x51\x26\x01\x79\x94\x2c\x3c\x78\xa4\xcc\x9a\xe5\x78\x61\x5f\xa1\xef\x30\x35\x86\x70\x10\xf4\xa0\x18\xa4\xb4\x0c\x96\x41\x41\x69\x8b\xd2\xb5\x60\x5a\xaf\x2a\xab\x81\x5b\x16\xac\x26\xe5\xad\x17\xa4\x46\xb9\xe5\xff\x4f\xa7\x9e\xb8\x50\x64\x0e\x1b\x74\x4b\x83\xfb\xba\x18\x2b\x15\x98\xed\xde\xb5\x60\x7d\x37\x1b\x87\x5a\x6a\xc2\x13\x50\xc6\x40\x96\x0d\x2a\x72\x1d\x63\x20\x19\xa7\x0d\xb2\x67\x1f\xbf\x5c\x5d\x6f\x2f\x2f\xfe\x5c\xe7\xb0\x41\x34\x49\x44\x46\x81\x88\xf4\xe2\x23\xac\x37\x37\x70\x73\xbe\x63\x28\x91\x70\xf6\x4f\x00\x00\x00\xff\xff\x69\x0e\x31\x61\xf0\x07\x00\x00")

func coreWorkshopInfraTemplatesExternalDnsYamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraTemplatesExternalDnsYaml,
		"core-workshop-infra/templates/external-dns.yaml",
	)
}

func coreWorkshopInfraTemplatesExternalDnsYaml() (*asset, error) {
	bytes, err := coreWorkshopInfraTemplatesExternalDnsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/templates/external-dns.yaml", size: 2032, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coreWorkshopInfraTemplatesTraefik2Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xfd\x6e\xe3\x36\x12\xff\xdf\x4f\x31\xb0\x8b\xde\x16\x58\x31\xd9\x6e\xef\x50\x08\x30\x70\x8e\xe3\xed\x06\x4d\xb2\x41\xe2\x5d\xe0\x0e\x0b\xa4\x63\x6a\x2c\xb1\xa6\x48\x82\xa4\x9c\xfa\x72\x79\xf7\x03\xf5\x61\xc9\x56\xec\x6d\xf6\x8a\x55\x80\x40\x22\x67\x7e\x33\x9c\x6f\x7a\x34\x1a\xc1\xed\xd9\x64\x0a\xa3\xd1\x68\x80\x46\x7c\x22\xeb\x84\x56\x31\xd8\x05\x72\x86\x85\xcf\xb4\x15\xff\x41\x2f\xb4\x62\xab\x9f\x1d\x13\xfa\x64\xfd\x66\xb0\x12\x2a\x89\x61\x2a\x0b\xe7\xc9\xde\x6a\x49\x83\x9c\x3c\x26\xe8\x31\x1e\x00\x28\xcc\x29\x06\x6f\x91\x96\x62\x35\xb0\x85\x24\x17\x0f\x22\x40\x23\x7e\xb1\xba\x30\x2e\xd0\x00\x44\x30\x1c\x0e\x00\x2c\x39\x5d\x58\x4e\xdb\x55\x47\x76\x2d\x38\xb9\xfa\x93\x54\x62\xb4\x50\xde\x6d\xb7\xb9\xa5\xf2\x6b\x4d\x76\xb1\xe5\x4a\xc9\xd7\x6f\x52\xb8\xe6\xf5\x01\x3d\xcf\x9e\x93\x4c\x7f\x78\x52\xe1\x9c\x0d\xaa\x22\xff\xa0\xed\x4a\xa8\xb4\x3e\xe5\x73\x9a\x09\x95\x5a\x72\x6e\xab\x5a\xfd\xcd\x25\xd6\x8b\x7f\x95\x46\x87\x25\x9f\x38\x8f\xbe\xe8\xc9\x2a\x4c\x82\x9e\x06\x51\x14\xed\xf8\x70\xeb\xa9\xbb\xca\xa6\x13\xce\x75\xa1\xfc\x11\x67\x55\xdf\xce\x20\xa7\x18\x82\x45\x5c\xa6\x0d\xf7\xb2\x07\xfd\xb2\xf0\x38\x13\x2a\x11\x2a\x3d\x16\x25\x5a\xd2\x2d\x2d\xc3\x46\x63\x9b\x23\x42\x06\x00\xfd\x10\xdc\x87\x74\xc5\xe2\x77\xe2\xbe\x8c\xbd\x67\xcd\xf0\xa2\xc3\x87\x44\x99\x6a\xb5\x14\xe9\x15\x9a\xd7\x70\x4e\x46\xea\x4d\x4e\xca\xc3\xf7\x0d\x6e\x2f\x87\x5a\x53\x34\x8c\x87\x2d\x10\xf1\x65\x7a\x58\x03\x00\x89\x0b\x92\xb5\xc3\xd1\x98\x56\xeb\x06\x0d\x8d\x60\x1b\xcc\x65\x0c\xff\x2d\x89\x32\xef\x4d\x45\x0e\x60\x75\xe1\xc9\xba\xe6\x13\x20\xdf\x44\x68\x44\xfb\x0d\x10\xd2\x34\x86\xf7\xda\xf9\x57\xbf\xd5\xd0\xec\xf1\x11\xd8\x27\x94\x05\x39\xd6\x51\x86\x4d\x2f\x3f\xde\xcd\x67\xb7\xf7\xe7\x1f\xae\x26\x17\xd7\xf0\xf4\xf4\xdb\x0f\x1d\xa0\x3a\x7f\xe3\xa0\xd0\x3f\x85\xf2\x64\x15\xca\xce\x3e\x29\x6f\x37\x37\x65\x4a\x77\xe5\x47\x1d\x37\xb4\x6b\x0f\xb4\x70\xc4\x0b\x4b\x9d\xd5\x5c\x24\x89\xa4\x07\xb4\xb4\x07\x80\x46\x44\x21\x5a\x06\x47\xe8\x1a\x9a\x2e\xe7\x02\x9d\xe0\x93\xbd\x45\x80\xc2\xed\x98\x2c\x3c\x23\x98\x67\xc2\xc1\x3a\xd8\x04\x84\x03\x4b\x46\x22\xa7\x04\xb4\x8a\x12\xca\x51\x25\xb0\xb4\x3a\x07\x9f\x11\xa4\x62\x4d\x0a\x48\xad\x61\x8d\xf6\x35\xf8\x0c\x3d\x70\x9d\x93\xab\x48\x10\xee\xca\x4a\xb6\x83\x1f\xc1\xf0\xf3\xe3\xe7\xc7\x92\x6b\xd8\x98\xf9\x6c\x72\x77\x31\xbd\x9f\x7c\x9c\xbf\xbf\x3f\x9b\xde\xfe\xeb\x66\x3e\x84\xcf\x4f\x9f\x9f\x86\xbd\x9c\x44\x63\x5c\x9b\x7e\x6d\x84\x7e\x4d\xbe\x1f\x09\x38\x67\x88\xc7\x65\x95\x32\x52\x70\x74\x31\xbc\x19\x04\xb7\x4b\xe2\x5e\xdb\x8a\x21\x0f\x75\xee\xb2\x83\xb0\x87\x01\xe0\x29\x37\x12\x3d\xd5\xf4\x1d\x0d\xc3\x23\x77\x58\x7b\xcc\x00\x8d\x12\x9d\x88\xab\xd3\xfa\x7a\xef\x80\xe1\xe1\x5a\x79\x14\xaa\xe3\xcf\xa8\x67\x88\xea\x11\x39\xa6\xed\x72\xbc\xfe\x91\xfd\x83\xbd\x6d\xd5\xb0\x69\x47\xa9\x08\xa2\x90\x45\x63\x6f\x0b\xda\x59\xcc\xc9\x5b\xc1\x1d\x33\x56\xe7\xe4\x33\x2a\x5c\x9f\x06\x39\x27\xe7\xa4\x4e\x8f\x6c\xb1\xa5\x90\x64\xd0\x67\xe3\x93\x6d\x95\x40\x9e\xd1\x49\x45\xc1\xa4\x4e\x77\x18\x03\x8b\xa4\x35\xc9\xf1\xf9\xec\xec\xe3\x2f\x3b\x7b\xc6\xea\xb5\x48\xc8\xba\x12\x94\x25\xc2\x96\xee\xda\x74\xa0\x97\xe9\x31\x8e\xb2\x75\xf5\x95\x6d\xa9\x56\xc5\x82\xac\x22\x4f\xae\x6e\x57\x2f\x22\x66\x4d\x8f\xab\xfb\x3d\x33\xc5\x42\x0a\x97\x51\x52\xbb\x77\xdc\x09\xcf\x93\x7d\xb7\x05\xf0\xb2\xb0\x54\xb3\x02\x7b\xa0\x05\xc3\x24\x29\xb5\x88\x7f\x3e\x3d\x4a\x17\x0a\x25\xb3\x54\x59\x24\x74\x60\xd6\x52\x30\xaf\xc7\xfd\x1a\xf4\x62\x14\xc7\x33\xca\x69\x1c\x68\xdc\x31\x94\x4a\x4e\xab\xf9\x4f\x3f\xbd\xfd\x13\xe4\xa5\x68\x2f\x1d\xe3\x64\x7d\x98\x1d\xe4\x9a\xec\x58\x92\x77\xa4\xb8\xdd\x18\x7f\x10\xa3\x29\xf4\x1d\x53\x1d\x31\x56\x43\xfd\x32\x79\x81\x48\x2c\x05\x47\x4f\xae\x21\x76\xac\x43\xcd\x90\xe7\xc4\x12\xe5\x78\x86\x52\x92\x4a\xa9\x1f\x38\x5f\x01\xc2\x9a\x60\x1b\x7f\xf7\x6a\x7e\x3b\x99\xbd\xbb\xf8\xf5\xfe\xfc\xfa\xee\xfe\xe6\xf6\xc3\xa7\x8b\xf3\xd9\xed\x0f\xff\xb7\x80\x2d\xdd\xf8\x0d\x2b\xff\xe2\xbf\xbf\x7d\xfd\x86\x9d\xb2\xd3\xf2\xf5\x6b\xf0\x29\x47\x21\xc7\xdf\xbd\xba\x9c\xcd\xef\x66\xd7\x65\xb5\xbf\x9f\x5d\x4d\x2e\x2e\xbf\x4a\x5b\xe7\xb5\xc5\x94\xfa\xd5\x23\x27\xf6\xbb\xd3\x6a\x8b\x39\x82\x1b\x49\xe8\x08\x94\xf6\x54\xb5\x2a\x1f\x1a\x9d\x70\x65\x2b\x73\x1e\x53\xa1\x52\xb8\x24\xff\x37\x07\xb3\x4a\x44\x59\x76\xc9\xb2\x0e\xc8\x07\xc5\x09\x36\xba\x08\xb3\x6f\x00\x50\xa9\x83\x7a\xac\x7e\x5d\xae\xbb\x4c\x17\x32\x01\x4b\xb9\x5e\xd7\x72\x1e\x32\x2d\x09\xa4\x50\x04\x28\xbd\x4e\x43\xbd\xdc\x01\x7d\xc1\x79\x39\x56\x3a\x55\x89\x16\x9f\x94\x27\x8d\x6a\xed\xa3\xf5\xe9\x8f\x2c\x0c\x49\x5d\x36\x6d\xd3\x93\x6d\x29\xdc\x0a\x35\xda\xfa\x9d\x3a\x5f\xf5\x8a\x80\xda\x69\xd7\xdb\xa6\x72\xa3\xad\x8f\x61\x27\x71\x5a\x06\x77\x98\x63\x37\xbb\x2b\x16\x4c\x72\xa1\x8e\x09\xe9\x88\x21\xb5\xee\x2b\xd9\x8b\x9c\x0e\x58\x39\xb7\xbc\xb3\x3a\xdf\x9d\x6a\xaa\x2b\xd5\xaf\xb4\xa9\x07\xf0\xee\x53\x81\xee\x4e\x06\xdd\x67\x45\x9b\x63\x32\x1b\xad\x9e\x4b\xc0\x6f\xa0\xd8\x51\xb1\xf5\x30\x27\x5c\x98\xf4\x12\x10\xaa\x8c\xf5\x61\xb8\x61\x09\x1e\x0c\xbf\x14\x69\x61\xcb\x6b\xc7\x10\x96\xda\x96\xdb\xf3\x2a\x93\x60\x72\x73\xd1\x3b\xe4\xc1\x81\xed\x1b\x9c\xf4\xcb\xb2\x47\xd0\x58\x20\x9a\x7e\xbc\x9b\x7f\xb8\xba\xf8\xf7\x2c\x86\xf7\x64\x43\x22\x86\xff\x8a\x28\x71\xe0\x35\x2c\x08\xb4\x22\xc8\xb5\x25\x48\x36\x0a\x73\xc1\x61\x68\x42\xfb\x1f\x56\x39\x9b\xe3\x8a\xdc\xd6\x14\xb8\x90\x04\x5e\x77\x04\x55\xe3\x49\x69\xaf\xf3\xeb\x3b\xf0\x7a\x45\x6d\x4c\xaf\xb5\x2c\x72\xba\x0a\xa3\xda\x33\x39\xf6\xdc\x30\x02\x90\x07\xea\x1b\xf4\x59\x0c\x07\xc6\x95\x3d\xee\x50\xe7\xbe\xc4\xdf\xa1\xa9\x74\x3a\x34\x1c\xee\x88\xe2\xcd\x55\xae\xeb\xa6\x43\xe4\xc7\xf5\xa2\xdc\xf8\xcd\xb9\xb0\x31\x3c\x3e\x7d\xf1\xee\xfe\x17\x0f\xf1\x00\xa8\x94\xf6\x65\x74\xd7\xfb\x23\x78\xa7\x2d\x27\xc0\x50\xa6\xad\x87\xf9\xfc\x12\x9c\xae\x3c\x1e\xdc\x68\x89\x6b\x9b\x00\xcf\x50\xa5\xe4\x80\xa3\x02\x63\xb5\xc1\x14\x3d\xc1\x12\xc3\x3d\xbc\xc4\xa1\x3f\xaa\x3b\x5f\x94\x28\xc7\x50\x9a\x0c\x3b\xd3\x1e\x13\xfa\xc4\x7b\x19\xc3\xf0\xed\xa9\x1b\xd6\x72\xa7\x96\x02\x06\x76\xc5\x34\x09\xe7\xdb\x84\x83\xef\x21\x41\x97\x2d\x34\xda\xe4\xcf\x49\xca\xb4\xf3\x95\xad\x86\x2f\xbd\xd3\x0e\xb7\xf7\x9c\x6d\x37\xe8\xf5\x01\xd3\x16\xfe\x7e\xc9\x37\x9d\x1a\xbf\x7b\x39\xda\xbf\x09\x6d\x4c\xa8\xdb\x1a\x93\x33\x94\xa8\x38\xd9\x5e\x30\xf4\x7e\x9e\x6a\xaf\x79\x17\xd5\xd8\x3c\x95\xe8\x5c\x1b\x23\xf0\x4c\x90\xf4\x1c\xde\xfd\xfd\x6a\xcf\x70\xc2\x45\x09\x2d\xb1\x90\x3e\x2a\xb7\x4b\x03\x16\xd4\x1a\x25\xf4\x25\xab\xa5\x24\xbb\x15\x51\xf2\x55\x90\x51\xbb\x3d\xf8\x5f\x00\x00\x00\xff\xff\x89\x0a\x61\x37\x62\x14\x00\x00")

func coreWorkshopInfraTemplatesTraefik2YamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraTemplatesTraefik2Yaml,
		"core-workshop-infra/templates/traefik-2.yaml",
	)
}

func coreWorkshopInfraTemplatesTraefik2Yaml() (*asset, error) {
	bytes, err := coreWorkshopInfraTemplatesTraefik2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/templates/traefik-2.yaml", size: 5218, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _podinfoExternalChart = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x28\x29\x29\x28\xb6\xd2\xd7\x2f\x2e\x49\x4d\x4b\xcc\x2b\x28\xca\x4f\x49\xcc\xd3\x4b\xcf\x2c\xc9\x28\x4d\xd2\xcb\xcc\xd7\x2f\xc8\x4f\xc9\xcc\x4b\x83\xd3\x80\x00\x00\x00\xff\xff\xb0\xe7\xfd\xe6\x2e\x00\x00\x00")

func podinfoExternalChartBytes() ([]byte, error) {
	return bindataRead(
		_podinfoExternalChart,
		"podinfo/external-chart",
	)
}

func podinfoExternalChart() (*asset, error) {
	bytes, err := podinfoExternalChartBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "podinfo/external-chart", size: 46, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _podinfoValuesOverrideYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x8e\x4d\x8b\x1a\x41\x10\x86\xef\xfd\x2b\xde\xb4\x67\x5b\x61\x22\x42\xdf\x82\x26\x24\x60\x5c\x58\xdd\xf3\x52\xf6\x94\x33\x83\x6d\xd7\xd0\x55\xae\x0b\xe2\x7f\x5f\x66\x6f\x0f\x0f\xbc\x1f\x95\xc7\x3c\x24\xda\xc8\xad\x58\x44\xe3\xb2\x74\x3b\xfe\xe0\x1c\x31\x94\xb3\x38\x77\x1b\xa2\x03\x92\x64\xa9\x11\x7e\xd6\xfc\x5c\xad\xd7\xc9\x3b\xe0\xca\xaa\xd4\x71\x84\xff\xcb\x39\x0b\xee\x52\x73\xfb\xc3\x3b\x37\x5c\x27\xed\x00\xa3\x2e\x62\x15\x96\xa1\x71\x6e\x28\x5d\x65\xd5\x49\x73\xa1\x53\xe6\x36\xe2\x4c\x59\xd9\xcd\x80\x91\xac\x8f\x58\x4c\xd8\x8b\x9a\xc6\x89\xe6\xf0\xa3\xb4\xd3\x89\xf0\x78\x20\xdc\xa5\x5e\xb4\x97\x31\x59\x0e\x9b\xdd\xdb\xe1\xf8\xfb\xf5\x7d\xfb\xf2\xff\xd7\xbf\x3d\x9e\x4f\x3f\x05\xa8\x14\x31\xb2\x41\xca\xf7\x0c\x30\xc3\x1f\xa9\x89\x41\xd0\x5e\xaa\xe1\x78\xdc\x41\x05\xd6\x93\x61\xbb\x3f\xa0\x72\x92\xda\x22\xf5\x54\x3a\x56\x24\x2a\x18\xab\x8c\xd4\x91\x31\xce\xa4\xc6\x75\xea\x05\xf8\xd3\xb8\x16\xca\xf3\xb6\x68\xa0\x3c\xf6\x14\x2e\xb7\x13\xd7\xc2\xc6\x1a\x06\x59\x98\xe5\x08\xdf\x2c\xd5\xbb\xaf\x00\x00\x00\xff\xff\x19\x61\xfc\xea\x50\x01\x00\x00")

func podinfoValuesOverrideYamlBytes() ([]byte, error) {
	return bindataRead(
		_podinfoValuesOverrideYaml,
		"podinfo/values-override.yaml",
	)
}

func podinfoValuesOverrideYaml() (*asset, error) {
	bytes, err := podinfoValuesOverrideYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "podinfo/values-override.yaml", size: 336, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"core-workshop-infra/Chart.yaml":                  coreWorkshopInfraChartYaml,
	"core-workshop-infra/templates/code-server.yaml":  coreWorkshopInfraTemplatesCodeServerYaml,
	"core-workshop-infra/templates/external-dns.yaml": coreWorkshopInfraTemplatesExternalDnsYaml,
	"core-workshop-infra/templates/traefik-2.yaml":    coreWorkshopInfraTemplatesTraefik2Yaml,
	"podinfo/external-chart":                          podinfoExternalChart,
	"podinfo/values-override.yaml":                    podinfoValuesOverrideYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"core-workshop-infra": {nil, map[string]*bintree{
		"Chart.yaml": {coreWorkshopInfraChartYaml, map[string]*bintree{}},
		"templates": {nil, map[string]*bintree{
			"code-server.yaml":  {coreWorkshopInfraTemplatesCodeServerYaml, map[string]*bintree{}},
			"external-dns.yaml": {coreWorkshopInfraTemplatesExternalDnsYaml, map[string]*bintree{}},
			"traefik-2.yaml":    {coreWorkshopInfraTemplatesTraefik2Yaml, map[string]*bintree{}},
		}},
	}},
	"podinfo": {nil, map[string]*bintree{
		"external-chart":       {podinfoExternalChart, map[string]*bintree{}},
		"values-override.yaml": {podinfoValuesOverrideYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
