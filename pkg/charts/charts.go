// Code generated for package charts by go-bindata DO NOT EDIT. (@generated)
// sources:
// charts/core-workshop-infra/Chart.yaml
// charts/core-workshop-infra/templates/code-server.yaml
// charts/core-workshop-infra/templates/external-dns.yaml
// charts/core-workshop-infra/templates/traefik-2.yaml
// charts/podinfo/external-chart
// charts/podinfo/values-override.yaml
package charts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _coreWorkshopInfraChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\xb5\x52\x48\xce\x2f\x4a\xd5\x2d\xcf\x2f\xca\x2e\xce\xc8\x2f\xd0\xcd\xcc\x4b\x2b\x4a\xe4\x2a\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x30\xd0\x33\xd4\x33\xe0\x02\x04\x00\x00\xff\xff\xc3\x23\xd1\xe6\x29\x00\x00\x00")

func coreWorkshopInfraChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraChartYaml,
		"core-workshop-infra/Chart.yaml",
	)
}

func coreWorkshopInfraChartYaml() (*asset, error) {
	bytes, err := coreWorkshopInfraChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/Chart.yaml", size: 41, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coreWorkshopInfraTemplatesCodeServerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x73\xdb\x36\x10\xbd\xeb\x57\xec\x38\x67\x92\x76\x7a\xf1\xf0\xe6\x5a\x71\xc7\x53\xdb\xd2\x48\x4a\x7a\xcc\xac\xc0\x95\x88\x0a\x04\x38\xc0\x52\xb6\x9a\xe6\xbf\x77\xc0\x2f\x81\xa2\xd4\x4c\x7c\x08\x4f\x24\x80\x7d\xfb\xf0\xf0\x76\x41\x2c\xe5\x17\xb2\x4e\x1a\x9d\xc2\xfe\x66\xb2\x93\x3a\x4b\xe1\x05\x0b\x72\x25\x0a\x9a\x14\xc4\x98\x21\x63\x3a\x01\xd0\x58\x50\x0a\xaf\xc6\xee\x5c\x6e\x4a\xc1\x6a\x12\x45\xd1\x24\x04\xb0\x6b\x14\x31\x56\x9c\x1b\x2b\xff\x41\x96\x46\xc7\xbb\x5b\x17\x4b\x93\xf4\xd0\xf7\xaa\x72\x4c\x76\x61\x14\xfd\x2e\x75\x26\xf5\xf6\x4c\x0e\x61\x32\x8a\x1c\xd9\x3d\xd9\x76\xac\x66\x33\x4c\x6e\x8d\xa2\x05\x6d\x7c\x14\x96\xf2\x0f\x6b\xaa\xf2\x7f\x18\x4c\x00\x46\x04\x8e\xf9\x9a\xb1\x08\xb3\x42\xea\x89\xab\xd6\x7f\x93\x60\x97\x4e\xa2\x36\x66\x49\x76\x2f\x05\xdd\x09\x61\x2a\xcd\x3f\x47\xf3\x54\xa3\x5e\x89\x13\xd0\x77\xaa\x70\x11\xfe\xde\xe8\x8d\xdc\x3e\x63\xf9\x5e\x64\x00\x85\x6b\x52\xce\x87\x79\x89\xcb\x61\x5c\x87\x28\xea\x3c\x29\xfc\x1b\xb5\xeb\x06\x5c\xfc\x50\xc8\xa7\x1e\x68\xe5\x6e\x91\xa3\xee\xbb\xf9\xac\x17\x90\x65\xb9\x91\x02\x99\xa2\xf6\x30\xf9\x90\x42\xb2\x47\x9b\xd8\x4a\x27\x8e\x84\x25\x76\xc9\xae\x5a\x93\xd5\xc4\x54\x7b\xcc\x35\x82\x62\x23\x68\x22\x30\x16\x96\x7b\xcc\x86\x76\x0a\x39\x73\xe9\xd2\x24\x8c\xcd\x68\x83\x95\xea\x96\x36\x12\x85\x63\xc2\x68\xa6\x37\x3e\xf2\x6d\xbe\x03\xbe\xed\x06\x60\x88\x34\x90\xf6\x74\xaa\x72\xe3\x80\x33\xa9\x2b\x6b\x49\x73\xd4\xa5\x1c\x4c\x7a\x88\x9e\xd4\x38\xb6\xcd\xd1\x67\x64\xb3\x23\xfd\x20\x15\xfd\xac\x92\x75\xe0\xc8\x69\x58\x96\xee\x58\xd7\x53\x2a\x95\x39\x14\xf4\x7e\x27\xff\xc0\x6f\xae\x24\xe1\xa7\x1c\x29\x12\x6c\xda\x7d\x15\xc8\x22\x7f\x0a\xe2\xce\x44\x02\x30\x15\xa5\x42\xa6\x36\x26\xe0\xe7\x1f\x35\x08\x3f\x0b\x00\xd0\xa5\xef\xac\x74\xac\xdc\x97\x33\x5b\xec\x5c\x83\x52\xf7\x47\xe4\x0f\x49\x16\xb8\xa5\x14\x54\xf5\x86\x2e\xd9\xdd\xba\xe8\x95\xd6\x91\xcc\x28\xdd\x7f\x8c\x6f\xe2\x9b\x9e\xc2\x07\x58\xcd\xa6\xb3\x14\x1e\x35\x70\x4e\xb0\xa9\xb8\xb2\x94\xc2\x36\x17\xd6\x9f\x8f\x50\xa6\xca\x22\x8d\x2c\xf7\x14\x69\x63\x33\x29\x4e\xe0\xae\xe3\x8f\xf1\x75\x0f\x57\xa7\x9d\x57\x4a\xcd\x8d\x92\xe2\x90\xc2\x9d\x7a\xc5\x83\x1b\xd8\xf4\xdc\x16\x00\x4a\x63\x39\x90\xa6\xb3\x99\x2f\xa2\x7e\x30\xd8\xea\xdc\x58\x4e\xe1\xf6\xfa\xf6\x98\x9b\xf4\x7e\x1c\xbf\xfa\xbc\x9a\x2d\x1e\xef\x9e\x96\x5f\x17\x9f\xe6\xb3\x00\x69\x8f\xaa\xa2\x07\x6b\x8a\x34\x18\xf4\x8a\x7b\x9b\xfe\x49\x87\xb6\xe1\x87\xcf\xf8\x5a\x1a\xce\xef\xe8\x70\x31\xe1\x98\xcf\xf4\x71\xf1\x4b\xe9\x84\xf9\x3a\x36\xf3\xbb\xe5\xf2\xaf\xd9\x62\xfa\x0b\x88\xdc\x3f\x7d\x5e\xae\x3e\x2d\xbe\x8e\x52\xee\x8d\xaa\x0a\x7a\xf6\x06\x3f\x73\xfe\xbe\x5d\x88\x63\x43\x6f\x9e\xc2\x2f\x9e\x23\xe7\x29\x24\xb9\x29\x28\xf1\x86\xb2\x49\xec\x17\x8f\x10\x32\x23\x76\x81\xcf\x86\xd1\x5d\x77\x6a\x16\xc5\xce\x88\xdd\x24\xa4\x15\x54\xd4\x45\x3e\xa2\xbb\xff\x42\x5d\x2e\x19\xfd\x02\xab\xdc\xb8\x86\x52\x00\x51\x5e\xa6\xf8\xa3\xab\xfe\xbd\x9d\xf1\x7c\xeb\x3b\xd3\xa6\xfa\x6a\x8d\xea\x57\x5f\x89\xf5\x52\x46\xbb\x25\x3e\x29\xce\xa0\x92\x4f\x89\x6b\x62\x9f\x5f\xea\xed\xe8\xff\xed\x51\x6f\x2d\x39\xf7\xfe\x26\x8f\x5a\x1b\xae\xff\xcc\xda\x53\xfc\x00\x0f\xc6\x0a\x02\x04\x97\x1b\xcb\xb0\x5a\x3d\x81\x33\xc0\x39\x32\x4c\x5f\x96\x60\x49\x18\x9b\x81\xc8\x51\x6f\xc9\x81\x40\x0d\xa5\x35\x25\x6e\x91\x09\x36\xe8\x2f\xde\x1a\x87\xde\x98\xac\x46\x15\x65\xda\xc5\xa8\xca\x1c\xe3\xe1\xad\xc6\xac\x52\xb8\xfa\xed\xda\x5d\xf5\x8a\xca\x66\x37\xf7\x0a\x9d\x6b\xfa\x38\x5b\xa4\x8d\xf4\x76\xb3\x95\xa2\x56\x4c\xef\x83\x14\xae\xbe\x7d\x83\xf8\x8b\x2f\x44\x17\x07\x7b\x8a\xbb\x1a\x9a\xce\x9e\xef\x1e\x5f\xe0\xfb\xf7\xab\x9a\x8f\x57\xb6\x33\x8e\x37\x4d\x60\xda\xd6\x43\x93\xd0\x53\xab\x43\xe9\x4b\xdf\xd2\x46\xbe\xf5\x13\x6b\x14\x3b\xd2\x59\xe8\xbf\xf6\xf2\x19\x56\xfb\xe5\x06\x0e\x6d\x13\x1f\x75\x87\xaa\x58\xfb\x1f\x90\xdb\xeb\xc9\x7f\x01\x00\x00\xff\xff\x6d\x42\x76\x1b\x03\x0c\x00\x00")

func coreWorkshopInfraTemplatesCodeServerYamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraTemplatesCodeServerYaml,
		"core-workshop-infra/templates/code-server.yaml",
	)
}

func coreWorkshopInfraTemplatesCodeServerYaml() (*asset, error) {
	bytes, err := coreWorkshopInfraTemplatesCodeServerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/templates/code-server.yaml", size: 3075, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coreWorkshopInfraTemplatesExternalDnsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xdf\x6f\xdb\xb6\x13\x7f\xf7\x5f\x71\xd0\xf7\x35\xf2\xb7\x45\x1f\x36\x08\xf0\x43\xd6\x18\x43\x80\xc6\x29\x9c\x2c\x1b\x36\x04\x01\x4d\x9e\x25\x2e\x14\x49\xdc\x9d\x94\xa8\x45\xfe\xf7\x81\x92\x9c\x48\x8d\xbb\x62\x88\x9e\x64\x9e\xee\xee\xf3\x8b\x56\xd1\xde\x20\xb1\x0d\xbe\x80\xf6\xfd\xe2\xde\x7a\x53\xc0\x15\x52\x6b\x35\x9e\x6a\x1d\x1a\x2f\x8b\x1a\x45\x19\x25\xaa\x58\x00\x78\x55\x63\x01\xf8\x28\x48\x5e\xb9\xdc\x78\x1e\x0f\x39\x2a\x8d\x05\x3c\x04\xba\xe7\x2a\x44\x2d\x6e\x91\xe7\xf9\x62\x3a\x9f\x76\x4a\x2f\x55\x23\x55\x20\xfb\x45\x89\x0d\x7e\x79\xff\x33\x2f\x6d\xf8\xff\xf3\xe6\x8f\xae\x61\x41\xda\x06\x87\x3f\x5a\x4b\x8d\x43\x2e\x16\x39\xa8\x68\x7f\xa5\xd0\x44\x2e\xe0\xaf\x2c\xbb\x5d\x00\x10\x72\x68\x48\x63\x7f\xc2\x03\x19\xce\x4e\x32\xf4\x26\x06\xeb\x25\xbd\xc7\x60\xb8\xff\xb8\x45\xda\xf5\x1f\x96\x28\xd9\x49\xf6\xa0\x44\x57\xd9\x49\xe6\x2c\x4b\x76\xfb\xed\xf8\x84\xc0\x27\x36\x69\x84\x47\x49\x74\xad\x2f\x47\x1e\xaf\x97\x5b\x5f\x12\x32\x23\x67\xb7\xf0\x5f\x77\xbd\x9e\xe6\x83\xc1\x6f\x40\x1f\x5a\xdf\x24\xf5\x2f\xd6\x1b\xeb\xcb\x1f\x28\x9e\xb7\x16\x1f\x90\xbe\xef\x37\x05\x87\x5b\xdc\xa7\xee\x03\x91\x7f\x41\xb2\x00\x78\xed\xf9\x51\xa7\xb9\xd9\xfd\x8d\x5a\x7a\xb3\x8f\x06\xf4\x6d\xb1\x54\x31\xf2\x8b\x2c\x67\x18\x5d\xe8\x6a\x7c\x43\xee\x39\xa2\x2e\x7a\xef\xa2\xb3\x5a\x71\x01\xef\x17\x00\x2c\xa4\x04\xcb\x2e\x55\x00\xa4\x8b\x58\xc0\x16\x35\xa1\x92\xc4\x9b\xd1\xa1\x96\x40\x43\xb9\x4e\xc9\xf8\xa4\x76\xe8\x78\x38\x48\x92\xc6\x57\x00\x04\xeb\xe8\x94\xe0\xd8\x34\xc1\x9b\x1e\x37\xeb\x3f\x3e\x01\xe0\x80\xb6\x7f\x9f\xe9\xba\x39\xc6\x39\x3d\x3a\x78\x51\xd6\x23\x3d\x0f\xcf\x8f\x0b\x34\x3c\xb6\x56\x25\x16\x90\x6c\x2f\x35\xa5\x10\x4e\x3f\x9b\xfd\x28\xda\x77\xcb\x9f\x96\x1f\x5e\x20\x53\x39\x21\xf0\x3f\xf8\x3d\xe9\x02\xe7\xc3\xad\x02\xe5\xcd\x21\x0a\x10\x86\x8c\xf4\x67\x83\xa8\x70\xb6\xb9\x02\x42\x1d\xc8\x30\xe8\x40\x84\x1c\x43\x1f\x74\xd7\xc1\xf3\xcc\x1c\xf2\x7c\xb8\x62\xab\xf1\xb2\x1e\x2b\x8d\xc2\x4c\x90\x5c\xa8\x7b\x64\x58\x8f\xd8\xd3\x2a\x46\x84\xe0\x5d\x07\x52\x21\x54\x81\x05\x0d\x7c\x09\x1e\x79\x70\xd3\xfa\x12\x22\x85\xd6\x1a\x34\x60\x42\xad\xac\x3f\x81\x50\x5b\x01\x09\xa9\xa0\x7b\x46\xce\x81\x6a\x95\x75\x6a\xe7\xe6\x43\x66\xa8\x86\xf6\x7c\x6f\x9d\x20\xad\xbe\x7e\x85\xe5\x8d\x72\x0d\xf2\x72\x12\xc3\xe5\xf6\xf2\xf2\xfa\xee\xec\xf2\xe2\xf4\x7c\x03\x4f\x4f\xcb\xd9\x80\x11\xc8\x77\x7b\xd7\x7f\x5c\xaf\xb7\x9b\xd3\x4f\x77\x67\x9b\xab\xbb\xcf\xdb\xcb\x9b\xf3\xb3\xf5\x16\x9e\x9e\x26\x02\x7c\x26\x6c\xd1\xcb\x5c\x83\x3d\x85\x1a\x0c\x3a\x94\x44\x57\xf9\xee\x60\xc0\x0b\x55\xf4\x3d\xb7\x7d\xe3\x1c\x70\xe7\x75\x45\xc1\x8f\xff\x0c\x73\x88\xc1\x59\xdd\xad\x9a\xc8\x48\x92\x27\x61\x67\x65\xc2\xd2\xb2\x50\xb7\x92\x47\x99\x15\xe4\x51\xf2\xf0\xe0\x91\x72\x6b\x56\xd3\x6b\xf9\x02\x7d\x8b\x69\x31\x84\xbd\xa0\x07\xc5\x20\x95\x65\xb0\x0c\x0a\x2a\x5b\x56\xae\x03\xd3\x79\x55\x5b\x0d\xdc\xb1\x60\x3d\x1b\x6f\xbd\x20\xb5\xca\xad\x3e\xbc\x9b\x7b\xe2\x42\x99\x3b\x6c\xd1\xad\x0c\xee\x9a\x72\xaa\x54\x60\xb6\x3b\xd7\x81\xf5\x7d\x36\xf6\x8d\x34\x84\x27\xa0\x8c\x81\x3c\x1f\x55\xe4\x26\xc6\x40\x32\x6d\x1b\x65\xcf\x3f\xfe\x76\x75\x7d\x79\x71\xfe\xe7\xba\x80\x0d\xa2\x49\x22\x32\x0a\x44\xa4\x67\x1f\x61\xbd\xb9\x81\x9b\xd3\x2d\x43\x85\x84\x8b\x7f\x02\x00\x00\xff\xff\xfa\xb6\x0f\x82\xd6\x07\x00\x00")

func coreWorkshopInfraTemplatesExternalDnsYamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraTemplatesExternalDnsYaml,
		"core-workshop-infra/templates/external-dns.yaml",
	)
}

func coreWorkshopInfraTemplatesExternalDnsYaml() (*asset, error) {
	bytes, err := coreWorkshopInfraTemplatesExternalDnsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/templates/external-dns.yaml", size: 2006, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coreWorkshopInfraTemplatesTraefik2Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xfd\x6e\xe3\x36\x12\xff\xdf\x4f\x31\xb0\x8b\xde\x16\x58\x31\xd9\x6e\x0f\x28\x04\x18\x38\xc7\xf1\x76\x83\x26\xd9\x20\xf1\x2e\x70\x87\x05\xd2\x31\x35\x96\x58\x53\x24\x41\x52\x4e\x7d\xb9\xbc\xfb\x81\xfa\xb0\x64\x2b\xf6\x36\xdb\x62\x15\x20\x90\xc8\x99\xdf\x0c\xe7\x9b\x1e\x8d\x46\x70\x7b\x36\x99\xc2\x68\x34\x1a\xa0\x11\x9f\xc8\x3a\xa1\x55\x0c\x76\x81\x9c\x61\xe1\x33\x6d\xc5\x7f\xd1\x0b\xad\xd8\xea\x67\xc7\x84\x3e\x59\xbf\x19\xac\x84\x4a\x62\x98\xca\xc2\x79\xb2\xb7\x5a\xd2\x20\x27\x8f\x09\x7a\x8c\x07\x00\x0a\x73\x8a\xc1\x5b\xa4\xa5\x58\x0d\x6c\x21\xc9\xc5\x83\x08\xd0\x88\x5f\xac\x2e\x8c\x0b\x34\x00\x11\x0c\x87\x03\x00\x4b\x4e\x17\x96\xd3\x76\xd5\x91\x5d\x0b\x4e\xae\xfe\x24\x95\x18\x2d\x94\x77\xdb\x6d\x6e\xa9\xfc\x5a\x93\x5d\x6c\xb9\x52\xf2\xf5\x9b\x14\xae\x79\x7d\x40\xcf\xb3\xe7\x24\xd3\x1f\x9e\x54\x38\x67\x83\xaa\xc8\x3f\x68\xbb\x12\x2a\xad\x4f\xf9\x9c\x66\x42\xa5\x96\x9c\xdb\xaa\x56\x7f\x73\x89\xf5\xe2\xdf\xa5\xd1\x61\xc9\x27\xce\xa3\x2f\x7a\xb2\x0a\x93\xa0\xa7\x41\x14\x45\x3b\x3e\xdc\x7a\xea\xae\xb2\xe9\x84\x73\x5d\x28\x7f\xc4\x59\xd5\xb7\x33\xc8\x29\x86\x60\x11\x97\x69\xc3\xbd\xec\x41\xbf\x2c\x3c\xce\x84\x4a\x84\x4a\x8f\x45\x89\x96\x74\x4b\xcb\xb0\xd1\xd8\xe6\x88\x90\x01\x40\x3f\x04\xf7\x21\x5d\xb1\xf8\x9d\xb8\x2f\x63\xef\x59\x33\xbc\xe8\xf0\x21\x51\xa6\x5a\x2d\x45\x7a\x85\xe6\x35\x9c\x93\x91\x7a\x93\x93\xf2\xf0\x7d\x83\xdb\xcb\xa1\xd6\x14\x0d\xe3\x61\x0b\x44\x7c\x99\x1e\xd6\x00\x40\xe2\x82\x64\xed\x70\x34\xa6\xd5\xba\x41\x43\x23\xd8\x06\x73\x19\xc3\xff\x4a\xa2\xcc\x7b\x53\x91\x03\x58\x5d\x78\xb2\xae\xf9\x04\xc8\x37\x11\x1a\xd1\x7e\x03\x84\x34\x8d\xe1\xbd\x76\xfe\xd5\x6f\x35\x34\x7b\x7c\x04\xf6\x09\x65\x41\x8e\x75\x94\x61\xd3\xcb\x8f\x77\xf3\xd9\xed\xfd\xf9\x87\xab\xc9\xc5\x35\x3c\x3d\xfd\xf6\x43\x07\xa8\xce\xdf\x38\x28\xf4\x2f\xa1\x3c\x59\x85\xb2\xb3\x4f\xca\xdb\xcd\x4d\x99\xd2\x5d\xf9\x51\xc7\x0d\xed\xda\x03\x2d\x1c\xf1\xc2\x52\x67\x35\x17\x49\x22\xe9\x01\x2d\xed\x01\xa0\x11\x51\x88\x96\xc1\x11\xba\x86\xa6\xcb\xb9\x40\x27\xf8\x64\x6f\x11\xa0\x70\x3b\x26\x0b\xcf\x08\xe6\x99\x70\xb0\x0e\x36\x01\xe1\xc0\x92\x91\xc8\x29\x01\xad\xa2\x84\x72\x54\x09\x2c\xad\xce\xc1\x67\x04\xa9\x58\x93\x02\x52\x6b\x58\xa3\x7d\x0d\x3e\x43\x0f\x5c\xe7\xe4\x2a\x12\x84\xbb\xb2\x92\xed\xe0\x47\x30\xfc\xfc\xf8\xf9\xb1\xe4\x1a\x36\x66\x3e\x9b\xdc\x5d\x4c\xef\x27\x1f\xe7\xef\xef\xcf\xa6\xb7\xff\xbe\x99\x0f\xe1\xf3\xd3\xe7\xa7\x61\x2f\x27\xd1\x18\xd7\xa6\x5f\x1b\xa1\x5f\x93\xef\x47\x02\xce\x19\xe2\x71\x59\xa5\x8c\x14\x1c\x5d\x0c\x6f\x06\xc1\xed\x92\xb8\xd7\xb6\x62\xc8\x43\x9d\xbb\xec\x20\xec\x61\x00\x78\xca\x8d\x44\x4f\x35\x7d\x47\xc3\xf0\xc8\x1d\xd6\x1e\x33\x40\xa3\x44\x27\xe2\xea\xb4\xbe\xde\x3b\x60\x78\xb8\x56\x1e\x85\xea\xf8\x33\xea\x19\xa2\x7a\x44\x8e\x69\xbb\x1c\xaf\x7f\x64\x6f\x5b\x25\x6c\xda\x51\x29\x82\x28\xe4\xd0\xd8\xdb\x82\x76\x16\x73\xf2\x56\x70\xc7\x8c\xd5\x39\xf9\x8c\x0a\xd7\xa7\x41\xce\xc9\x39\xa9\xd3\x23\x5b\x6c\x29\x24\x19\xf4\xd9\xf8\x64\x5b\x23\x90\x67\x74\x52\x51\x30\xa9\xd3\x1d\xc6\xc0\x22\x69\x4d\x72\x7c\x3e\x3b\xfb\xf8\xcb\xce\x9e\xb1\x7a\x2d\x12\xb2\xae\x04\x65\x89\xb0\xa5\xb3\x36\x1d\xe8\x65\x7a\x8c\xa3\x6c\x5c\x7d\x65\x5b\xaa\x55\xb1\x20\xab\xc8\x93\xab\x9b\xd5\x8b\x88\x59\xd3\xe1\xea\x6e\xcf\x4c\xb1\x90\xc2\x65\x94\xd4\xce\x1d\x77\x82\xf3\x64\xdf\x69\x01\xbc\x2c\x2b\xd5\xa4\xc0\x1e\x68\xc1\x30\x49\x4a\x2d\xe2\x9f\x4f\x8f\xd2\x85\x32\xc9\x2c\x55\x16\x09\xfd\x97\xb5\x14\xcc\xeb\x71\xbf\x02\xbd\x18\xc5\xf1\x8c\x72\x1a\x07\x1a\x77\x0c\xa5\x92\xd3\x6a\xfe\xd3\x4f\x6f\xff\x04\x79\x29\xda\x4b\xc7\x38\x59\x1f\x26\x07\xb9\x26\x3b\x96\xe4\x1d\x29\x6e\x37\xc6\x1f\xc4\x68\xca\x7c\xc7\x54\x47\x8c\xd5\x50\xbf\x4c\x5e\x20\x12\x4b\xc1\xd1\x93\x6b\x88\x1d\xeb\x50\x33\xe4\x39\xb1\x44\x39\x9e\xa1\x94\xa4\x52\xea\x07\xce\x57\x80\xb0\x26\xd8\xc6\xdf\xbd\x9a\xdf\x4e\x66\xef\x2e\x7e\xbd\x3f\xbf\xbe\xbb\xbf\xb9\xfd\xf0\xe9\xe2\x7c\x76\xfb\xc3\x5f\x16\xb0\xa5\x1b\xbf\x61\xe5\x5f\xfc\xcf\xb7\xaf\xdf\xb0\x53\x76\x5a\xbe\x7e\x0d\x3e\xe5\x28\xe4\xf8\xbb\x57\x97\xb3\xf9\xdd\xec\xba\xac\xf5\xf7\xb3\xab\xc9\xc5\xe5\x57\x69\xeb\xbc\xb6\x98\x52\xbf\x7a\xe4\xc4\x7e\x77\x5a\x6d\x31\x47\x70\x23\x09\x1d\x81\xd2\x9e\xaa\x46\xe5\x43\x9b\x13\xae\x6c\x64\xce\x63\x2a\x54\x0a\x97\xe4\xff\xe1\x60\x56\x89\x28\x8b\x2e\x59\xd6\x01\xf9\xa0\x38\xc1\x46\x17\x61\xf2\x0d\x00\x2a\x75\x50\x0f\xd5\xaf\xcb\x75\x97\xe9\x42\x26\x60\x29\xd7\xeb\x5a\xce\x43\xa6\x25\x81\x14\x8a\x00\xa5\xd7\x69\xa8\x97\x3b\xa0\x2f\x38\x2f\xc7\x4a\xa7\x2a\xd1\xe2\x93\xf2\xa4\x51\xad\x7d\xb4\x3e\xfd\x91\x85\x11\xa9\xcb\xa6\x6d\x7a\xb2\x2d\x85\x5b\xa1\x46\x5b\xbf\x53\xe7\xab\x4e\x11\x50\x3b\xcd\x7a\xdb\x52\x6e\xb4\xf5\x31\xec\x24\x4e\xcb\xe0\x0e\x73\xec\x66\x77\xc5\x82\x49\x2e\xd4\x31\x21\x1d\x31\xa4\xd6\x7d\x25\x7b\x91\xd3\x01\x2b\xa7\x96\x77\x56\xe7\xbb\x33\x4d\x75\xa1\xfa\x95\x36\xf5\xf8\xdd\x7d\x2a\xd0\xdd\xb9\xa0\xfb\xac\x68\x73\x4c\x66\xa3\xd5\x73\x09\xf8\x0d\x14\x3b\x2a\xb6\x1e\xe5\x84\x0b\x73\x5e\x02\x42\x95\xb1\x3e\x0c\xf7\x2b\xc1\x83\xe1\x97\x22\x2d\x6c\x79\xe9\x18\xc2\x52\xdb\x72\x7b\x5e\x65\x12\x4c\x6e\x2e\x7a\x87\x3c\x38\xae\x7d\x83\x93\x7e\x59\xf6\x08\x1a\x0b\x44\xd3\x8f\x77\xf3\x0f\x57\x17\xff\x99\xc5\xf0\x9e\x6c\x48\xc4\xf0\x5f\x11\x25\x0e\xbc\x86\x05\x81\x56\x04\xb9\xb6\x04\xc9\x46\x61\x2e\x38\x0c\x4d\x68\xff\xc3\x2a\x67\x73\x5c\x91\xdb\x9a\x02\x17\x92\xc0\xeb\x8e\xa0\x6a\x3c\x29\xed\x75\x7e\x7d\x07\x5e\xaf\xa8\x8d\xe9\xb5\x96\x45\x4e\x57\x61\x50\x7b\x26\xc7\x9e\x1b\x46\x00\xf2\x40\x7d\x83\x3e\x8b\xe1\xc0\xb8\xb2\xc7\x1d\xea\xdc\x97\xf8\x3b\x34\x95\x4e\x87\x46\xc3\x1d\x51\xbc\xb9\xc8\x75\xdd\x74\x88\xfc\xb8\x5e\x94\x1b\xbf\x39\x17\x36\x86\xc7\xa7\x2f\xde\xdc\xff\xe6\x11\x1e\x00\x95\xd2\xbe\x8c\xee\x7a\x7f\x04\xef\xb4\xe5\x04\x18\xca\xb4\xf5\x30\x9f\x5f\x82\xd3\x95\xc7\x83\x1b\x2d\x71\x6d\x13\xe0\x19\xaa\x94\x1c\x70\x54\x60\xac\x36\x98\xa2\x27\x58\x62\xb8\x85\x97\x38\xf4\x47\x75\xe3\x8b\x12\xe5\x18\x4a\x93\x61\x67\xda\x63\x42\x9f\x78\x2f\x63\x18\xbe\x3d\x75\xc3\x5a\xee\xd4\x52\xc0\xc0\xae\x98\x26\xe1\x7c\x9b\x70\xf0\x3d\x24\xe8\xb2\x85\x46\x9b\xfc\x39\x49\x99\x76\xbe\xb2\xd5\xf0\xa5\x37\xda\xe1\xf6\x96\xb3\xed\x06\xbd\x3e\x60\xda\xc2\xdf\x2f\xf9\xa6\x53\xe3\x77\xaf\x46\xfb\xf7\xa0\x8d\x09\x75\x5b\x63\x72\x86\x12\x15\x27\xdb\x0b\x86\xde\x8f\x53\xed\x25\xef\xa2\x1a\x9b\xa7\x12\x9d\x6b\x63\x04\x9e\x09\x92\x9e\xc3\xbb\xbf\x5e\xed\x19\x4e\xb8\x28\xa1\x25\x16\xd2\x47\xe5\x76\x69\xc0\x82\x5a\xa3\x84\xbe\x64\xb5\x94\x64\xb7\x22\x4a\xbe\x0a\x32\x6a\xb7\x07\xff\x0f\x00\x00\xff\xff\x72\xcf\x89\xcf\x60\x14\x00\x00")

func coreWorkshopInfraTemplatesTraefik2YamlBytes() ([]byte, error) {
	return bindataRead(
		_coreWorkshopInfraTemplatesTraefik2Yaml,
		"core-workshop-infra/templates/traefik-2.yaml",
	)
}

func coreWorkshopInfraTemplatesTraefik2Yaml() (*asset, error) {
	bytes, err := coreWorkshopInfraTemplatesTraefik2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "core-workshop-infra/templates/traefik-2.yaml", size: 5216, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _podinfoExternalChart = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x28\x29\x29\x28\xb6\xd2\xd7\x2f\x2e\x49\x4d\x4b\xcc\x2b\x28\xca\x4f\x49\xcc\xd3\x4b\xcf\x2c\xc9\x28\x4d\xd2\xcb\xcc\xd7\x2f\xc8\x4f\xc9\xcc\x4b\x83\xd3\x80\x00\x00\x00\xff\xff\xb0\xe7\xfd\xe6\x2e\x00\x00\x00")

func podinfoExternalChartBytes() ([]byte, error) {
	return bindataRead(
		_podinfoExternalChart,
		"podinfo/external-chart",
	)
}

func podinfoExternalChart() (*asset, error) {
	bytes, err := podinfoExternalChartBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "podinfo/external-chart", size: 46, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _podinfoValuesOverrideYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x8e\x41\x6b\x22\x41\x10\x85\xef\xfd\x2b\xde\x8e\x67\x5b\x61\x56\x84\xbe\x2d\xba\xcb\x06\x8c\x81\x68\xce\xa1\xec\x29\x67\x06\xdb\xae\xa1\xba\x26\x06\xc4\xff\x1e\xc6\xeb\xc7\x7b\x1f\x9f\xf2\x90\xfa\x48\x1b\x19\xb3\x05\xd4\x2e\x49\xbb\xe3\x2f\x4e\x01\x7d\x3e\x8b\x73\x63\x1f\x1c\x10\x25\x89\x06\x54\xb3\xfa\xf7\x6a\xbd\x8e\x95\x03\xae\x5c\x0a\xb5\x1c\x50\xfd\xe7\x94\x04\x37\xd1\xd4\xfc\xaa\x9c\xeb\xaf\x13\x76\x80\x51\x1b\xb0\xf2\x4b\x5f\x3b\xd7\xe7\x56\xb9\x94\x09\x73\xa6\x53\xe2\x26\xc0\x74\x64\x07\x0c\x64\x5d\xc0\xc2\x01\x9d\x14\x7b\x4e\xe6\xa8\x06\x69\xa6\x00\x7f\xbf\xc3\xdf\x44\x2f\xa5\x93\x21\x5a\xf2\x9b\xdd\xc7\xe1\xf8\xf7\xfd\x73\xfb\xf6\xfa\xe7\x65\x8f\xc7\x63\x6a\xa1\x9c\xc5\xc8\x7a\xc9\xcf\x3b\x30\xc3\x3f\xd1\xc8\x20\x94\x4e\xd4\x70\x3c\xee\x50\x04\xd6\x91\x61\xbb\x3f\x40\x39\x8a\x36\x88\x1d\xe5\x96\x0b\x22\x65\x0c\x2a\x03\xb5\x64\x8c\x33\x15\x63\x7d\x7a\xf8\xdb\x58\x33\xa5\x79\x93\x8b\xa7\x34\x74\xe4\x2f\xe3\x89\x35\xb3\x71\xf1\xbd\x2c\xcc\x52\x40\x55\x2f\x4b\xe5\x7e\x02\x00\x00\xff\xff\x02\x1f\xab\x2c\x4a\x01\x00\x00")

func podinfoValuesOverrideYamlBytes() ([]byte, error) {
	return bindataRead(
		_podinfoValuesOverrideYaml,
		"podinfo/values-override.yaml",
	)
}

func podinfoValuesOverrideYaml() (*asset, error) {
	bytes, err := podinfoValuesOverrideYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "podinfo/values-override.yaml", size: 330, mode: os.FileMode(436), modTime: time.Unix(1577836800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"core-workshop-infra/Chart.yaml":                  coreWorkshopInfraChartYaml,
	"core-workshop-infra/templates/code-server.yaml":  coreWorkshopInfraTemplatesCodeServerYaml,
	"core-workshop-infra/templates/external-dns.yaml": coreWorkshopInfraTemplatesExternalDnsYaml,
	"core-workshop-infra/templates/traefik-2.yaml":    coreWorkshopInfraTemplatesTraefik2Yaml,
	"podinfo/external-chart":                          podinfoExternalChart,
	"podinfo/values-override.yaml":                    podinfoValuesOverrideYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"core-workshop-infra": {nil, map[string]*bintree{
		"Chart.yaml": {coreWorkshopInfraChartYaml, map[string]*bintree{}},
		"templates": {nil, map[string]*bintree{
			"code-server.yaml":  {coreWorkshopInfraTemplatesCodeServerYaml, map[string]*bintree{}},
			"external-dns.yaml": {coreWorkshopInfraTemplatesExternalDnsYaml, map[string]*bintree{}},
			"traefik-2.yaml":    {coreWorkshopInfraTemplatesTraefik2Yaml, map[string]*bintree{}},
		}},
	}},
	"podinfo": {nil, map[string]*bintree{
		"external-chart":       {podinfoExternalChart, map[string]*bintree{}},
		"values-override.yaml": {podinfoValuesOverrideYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
